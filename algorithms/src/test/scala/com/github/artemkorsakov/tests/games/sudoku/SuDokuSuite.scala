package com.github.artemkorsakov.tests.games.sudoku

import com.github.artemkorsakov.games.sudoku.SuDoku._
import org.scalatest.funsuite.AnyFunSuiteLike
import org.scalatest.matchers.should.Matchers._

class SuDokuSuite extends AnyFunSuiteLike {
  test("SuDoku.result") {
    val suDoku = toSuDoku(
      "003020600\n" +
      "900305001\n" +
      "001806400\n" +
      "008102900\n" +
      "700000008\n" +
      "006708200\n" +
      "002609500\n" +
      "800203009\n" +
      "005010300"
    )
    suDoku.isDefined shouldBe true
    val result = suDoku.get.result.getOrElse(Array.empty[Array[Int]])
    result(0) shouldBe Array(4, 8, 3, 9, 2, 1, 6, 5, 7)
    result(1) shouldBe Array(9, 6, 7, 3, 4, 5, 8, 2, 1)
    result(2) shouldBe Array(2, 5, 1, 8, 7, 6, 4, 9, 3)
    result(3) shouldBe Array(5, 4, 8, 1, 3, 2, 9, 7, 6)
    result(4) shouldBe Array(7, 2, 9, 5, 6, 4, 1, 3, 8)
    result(5) shouldBe Array(1, 3, 6, 7, 9, 8, 2, 4, 5)
    result(6) shouldBe Array(3, 7, 2, 6, 8, 9, 5, 1, 4)
    result(7) shouldBe Array(8, 1, 4, 2, 5, 3, 7, 6, 9)
    result(8) shouldBe Array(6, 9, 5, 4, 1, 7, 3, 8, 2)
  }

  private val bigSudoku =
    "Grid 01\n003020600\n900305001\n001806400\n008102900\n700000008\n006708200\n002609500\n800203009\n005010300\n" +
    "Grid 02\n200080300\n060070084\n030500209\n000105408\n000000000\n402706000\n301007040\n720040060\n004010003\n" +
    "Grid 03\n000000907\n000420180\n000705026\n100904000\n050000040\n000507009\n920108000\n034059000\n507000000\n" +
    "Grid 04\n030050040\n008010500\n460000012\n070502080\n000603000\n040109030\n250000098\n001020600\n080060020\n" +
    "Grid 05\n020810740\n700003100\n090002805\n009040087\n400208003\n160030200\n302700060\n005600008\n076051090\n" +
    "Grid 06\n100920000\n524010000\n000000070\n050008102\n000000000\n402700090\n060000000\n000030945\n000071006\n" +
    "Grid 07\n043080250\n600000000\n000001094\n900004070\n000608000\n010200003\n820500000\n000000005\n034090710\n" +
    "Grid 08\n480006902\n002008001\n900370060\n840010200\n003704100\n001060049\n020085007\n700900600\n609200018\n" +
    "Grid 09\n000900002\n050123400\n030000160\n908000000\n070000090\n000000205\n091000050\n007439020\n400007000\n" +
    "Grid 10\n001900003\n900700160\n030005007\n050000009\n004302600\n200000070\n600100030\n042007006\n500006800\n" +
    "Grid 11\n000125400\n008400000\n420800000\n030000095\n060902010\n510000060\n000003049\n000007200\n001298000\n" +
    "Grid 12\n062340750\n100005600\n570000040\n000094800\n400000006\n005830000\n030000091\n006400007\n059083260\n" +
    "Grid 13\n300000000\n005009000\n200504000\n020000700\n160000058\n704310600\n000890100\n000067080\n000005437\n" +
    "Grid 14\n630000000\n000500008\n005674000\n000020000\n003401020\n000000345\n000007004\n080300902\n947100080\n" +
    "Grid 15\n000020040\n008035000\n000070602\n031046970\n200000000\n000501203\n049000730\n000000010\n800004000\n" +
    "Grid 16\n361025900\n080960010\n400000057\n008000471\n000603000\n259000800\n740000005\n020018060\n005470329\n" +
    "Grid 17\n050807020\n600010090\n702540006\n070020301\n504000908\n103080070\n900076205\n060090003\n080103040\n" +
    "Grid 18\n080005000\n000003457\n000070809\n060400903\n007010500\n408007020\n901020000\n842300000\n000100080\n" +
    "Grid 19\n003502900\n000040000\n106000305\n900251008\n070408030\n800763001\n308000104\n000020000\n005104800\n" +
    "Grid 20\n000000000\n009805100\n051907420\n290401065\n000000000\n140508093\n026709580\n005103600\n000000000\n" +
    "Grid 21\n020030090\n000907000\n900208005\n004806500\n607000208\n003102900\n800605007\n000309000\n030020050\n" +
    "Grid 22\n005000006\n070009020\n000500107\n804150000\n000803000\n000092805\n907006000\n030400010\n200000600\n" +
    "Grid 23\n040000050\n001943600\n009000300\n600050002\n103000506\n800020007\n005000200\n002436700\n030000040\n" +
    "Grid 24\n004000000\n000030002\n390700080\n400009001\n209801307\n600200008\n010008053\n900040000\n000000800\n" +
    "Grid 25\n360020089\n000361000\n000000000\n803000602\n400603007\n607000108\n000000000\n000418000\n970030014\n" +
    "Grid 26\n500400060\n009000800\n640020000\n000001008\n208000501\n700500000\n000090084\n003000600\n060003002\n" +
    "Grid 27\n007256400\n400000005\n010030060\n000508000\n008060200\n000107000\n030070090\n200000004\n006312700\n" +
    "Grid 28\n000000000\n079050180\n800000007\n007306800\n450708096\n003502700\n700000005\n016030420\n000000000\n" +
    "Grid 29\n030000080\n009000500\n007509200\n700105008\n020090030\n900402001\n004207100\n002000800\n070000090\n" +
    "Grid 30\n200170603\n050000100\n000006079\n000040700\n000801000\n009050000\n310400000\n005000060\n906037002\n" +
    "Grid 31\n000000080\n800701040\n040020030\n374000900\n000030000\n005000321\n010060050\n050802006\n080000000\n" +
    "Grid 32\n000000085\n000210009\n960080100\n500800016\n000000000\n890006007\n009070052\n300054000\n480000000\n" +
    "Grid 33\n608070502\n050608070\n002000300\n500090006\n040302050\n800050003\n005000200\n010704090\n409060701\n" +
    "Grid 34\n050010040\n107000602\n000905000\n208030501\n040070020\n901080406\n000401000\n304000709\n020060010\n" +
    "Grid 35\n053000790\n009753400\n100000002\n090080010\n000907000\n080030070\n500000003\n007641200\n061000940\n" +
    "Grid 36\n006080300\n049070250\n000405000\n600317004\n007000800\n100826009\n000702000\n075040190\n003090600\n" +
    "Grid 37\n005080700\n700204005\n320000084\n060105040\n008000500\n070803010\n450000091\n600508007\n003010600\n" +
    "Grid 38\n000900800\n128006400\n070800060\n800430007\n500000009\n600079008\n090004010\n003600284\n001007000\n" +
    "Grid 39\n000080000\n270000054\n095000810\n009806400\n020403060\n006905100\n017000620\n460000038\n000090000\n" +
    "Grid 40\n000602000\n400050001\n085010620\n038206710\n000000000\n019407350\n026040530\n900020007\n000809000\n" +
    "Grid 41\n000900002\n050123400\n030000160\n908000000\n070000090\n000000205\n091000050\n007439020\n400007000\n" +
    "Grid 42\n380000000\n000400785\n009020300\n060090000\n800302009\n000040070\n001070500\n495006000\n000000092\n" +
    "Grid 43\n000158000\n002060800\n030000040\n027030510\n000000000\n046080790\n050000080\n004070100\n000325000\n" +
    "Grid 44\n010500200\n900001000\n002008030\n500030007\n008000500\n600080004\n040100700\n000700006\n003004050\n" +
    "Grid 45\n080000040\n000469000\n400000007\n005904600\n070608030\n008502100\n900000005\n000781000\n060000010\n" +
    "Grid 46\n904200007\n010000000\n000706500\n000800090\n020904060\n040002000\n001607000\n000000030\n300005702\n" +
    "Grid 47\n000700800\n006000031\n040002000\n024070000\n010030080\n000060290\n000800070\n860000500\n002006000\n" +
    "Grid 48\n001007090\n590080001\n030000080\n000005800\n050060020\n004100000\n080000030\n100020079\n020700400\n" +
    "Grid 49\n000003017\n015009008\n060000000\n100007000\n009000200\n000500004\n000000020\n500600340\n340200000\n" +
    "Grid 50\n300200000\n000107000\n706030500\n070009080\n900020004\n010800050\n009040301\n000702000\n000008006"

  test("bigSudoku: SuDoku.result") {
    val sources = bigSudoku.split("Grid \\d{1,2}").filter(_.trim.nonEmpty)
    sources
      .flatMap(source =>
        for {
          sudoku <- toSuDoku(source)
          res    <- sudoku.result
        } yield res.head.take(3).mkString.toInt
      )
      .sum shouldBe 24702
  }
}
